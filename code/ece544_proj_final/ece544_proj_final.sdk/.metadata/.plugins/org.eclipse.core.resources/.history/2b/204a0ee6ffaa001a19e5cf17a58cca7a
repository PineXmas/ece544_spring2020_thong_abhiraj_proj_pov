/*
 * [Intro]
 *
 * ECE544 - Project POV
 * Thong Doan & Abhiraj Eksambekar
 * ==================================================
 * [Descriptions]
 *
 * This application display contents onto a POV display
 * according to the user's selection
 * ==================================================
 * [Notes]
 *
 * (New hardware export)
 * - Add following line to xparameters.h to enable usleep and/or timing-related functions
 *   #define XSLEEP_TIMER_IS_DEFAULT_TIMER
 * - Change address for Nexys4 IO in xparameters.h
 * - Eclipse settings: line number, spaces for tabs
 * - Speed up OLEDrgb drawing:
 *   >>> freertos10_xilinx_bsp_0/microblaze_0/libsrc/PmodOLEDrgb_v1_0/src/PmodOLEDrgb.c
 *   >>> function "OLEDrgb_DrawBitmap": reduce sleeping time at the end of function
 * - linker-script: change Stack size to 0x300
 *
 * (Misc.)
 * - Use vTaskDelay for sleeping (thread-safe)
 * - Task priority: the smaller the number, the lower priority of the task
 * - OLEDrgb_SetColor(x, y, z): x, y, x = B, R, G
 */

/****************************************************************************/
/*
 * LIBRARIES
 */
/****************************************************************************/

// Common
#include "ctype.h"
#include "math.h"

// Kernels
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "semphr.h"

// BSP includes
#include "xtmrctr.h"
#include "xgpio.h"
#include "sleep.h"
#include "xwdttb.h"
#include "nexys4IO.h"
#include "PmodOLEDrgb.h"
#include "PmodENC.h"
#include "xuartlite.h"
#include "xuartlite_l.h"

/****************************************************************************/
/*
 * DEFINES
 */
/****************************************************************************/

// GPIO
#define GPIO_SET_TO_OUTPUT      0U                              // value to set a GPIO port as output
#define GPIO_SET_TO_INPUT       0xFFFFU                         // value to set a GPIO port as input
#define GPIO_DEVICE_ID_LED      XPAR_AXI_GPIO_0_DEVICE_ID       // device ID of GPIO LED
#define GPIO_DEVICE_ID_BTN_SW   XPAR_AXI_GPIO_1_DEVICE_ID       // device ID of GPIO buttons & switches
#define MASK_BTN_UP				0x4								// mask for btn UP
#define MASK_BTN_DOWN			0x8								// mask for btn DOWN
#define MASK_BTN_CENTER			0x10							// mask for btn CENTER

// WDT
#define WDT_DEVICE_ID       XPAR_AXI_TIMEBASE_WDT_0_DEVICE_ID   // device ID of WDT
#define MASK_FORCE_CRASH    0x8000                              // mask for force-crash, SW[15]

// Nexys4 IO
#define NX4IO_BASEADDR      XPAR_NEXYS4IO_0_S00_AXI_BASEADDR    // base address of Nexys4 IO device

// PmodOLEDrgb
#define RGBDSPLY_GPIO_BASEADDR  XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_BASEADDR
#define RGBDSPLY_GPIO_HIGHADDR  XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_HIGHADD
#define RGBDSPLY_SPI_BASEADDR   XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_BASEADDR
#define RGBDSPLY_SPI_HIGHADDR   XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_HIGHADDR

// PmodENC
#define PMODENC_BASEADDR        XPAR_PMODENC_0_AXI_LITE_GPIO_BASEADDR
#define SHIFT_PMODENC_STATE		16				// shift amount to retrieve state data
#define PMODENC_STATE_THRESHOLD	20				// max distance between any two state

// Motor
#define MOTOR_BASEADDR			XPAR_MOTOR_MEASURE_CONTROL_0_S00_AXI_BASEADDR
#define MOTOR_REG_ID_DC			0				// register offset of duty cycle
#define MOTOR_REG_ID_PULSES		4				// register offset of pulses counted
#define MOTOR_REG_ID_DIR		8				// register offset of direction
#define MOTOR_PULSE_PERIOD_MS	100				// counting pulse period, in ms
#define MASK_MOTOR_GAIN         0x0003          // mask for motor speed gain, SW[1:0]
#define SHIFT_MOTOR_GAIN        0               // shift amount for motor speed gain, SW[1:0]
#define MOTOR_RPM_MIN			0				// min RPM
#define MOTOR_RPM_MAX			9999			// max RPM
#define MOTOR_DC_MIN			0				// min number representing 0% duty cycle
#define MOTOR_DC_MAX			255				// max number representing 100% duty cycle

// PID
#define MASK_PID_GAIN           0x0030          // mask for PID constant gain, SW[5:4]
#define SHIFT_PID_GAIN          4               // shift amount for PID constant gain, SW[5:4]
#define MASK_PID_SELECT         0x000C          // mask for PID selected constant, SW[3:2]
#define SHIFT_PID_SELECT        2               // shift amount for PID selected constant, SW[3:2]
#define PID_CONSTANT_MAX		10000.0F		// max value for a PID constant
#define PID_CONSTANT_MIN		0.0F			// min value for a PID constant
#define PID_OFFSET				30.0f			// RPM offset used in the PID control
#define PID_SAMPLE_PERIOD_TICKS	30				// sampling period in system ticks

// AXI TIMER 1
#define AXI_TIMER_1_DEVICE_ID	XPAR_AXI_TIMER_1_DEVICE_ID
#define AXI_TIMER_1_BASEADDR	XPAR_AXI_TIMER_1_BASEADDR
#define AXI_TIMER_1_TICK_COUNT	1							// to achieve 40KHz (100MHz / 40KHz = 2500)

// UART to NodeMCU
#define UART_DEVICE_ID			XPAR_AXI_UARTLITE_1_DEVICE_ID
#define UART_BAUD_RATE			115200
#define UART_BUFF_RECEIVE_MAX	2048							// max size of the receive buffer

// MISC.
#define SEMAPHORE_MAX_COUNT		0xFFFFFFFF		// max count for counting-semaphore
#define QUEUE_MAX_STATES		20				// max states to store in the queues

//POV
#define LEDs 10
#define columns 34
#define chFit 6

//u16 switches;
u8 pbtns;

//Character codes
int cA[5][5] = {
            {0,0,1,0,0},
            {0,1,1,0,0},
            {0,1,0,1,0},
            {1,1,1,1,0},
            {1,0,0,1,0}
};

int cB[5][5] = {
            {1,1,1,0,0},
            {1,0,0,1,0},
            {1,1,1,0,0},
            {1,0,0,1,0},
            {1,1,1,0,0}
};

int cC[5][5] = {
            {0,0,0,1,0},
            {0,1,1,0,0},
            {1,1,0,0,0},
            {0,1,1,0,0},
            {0,0,0,1,0}
};

int cD[5][5] = {
            {1,1,1,0,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,1,1,0,0}
};

int cE[5][5] = {
            {1,1,1,1,0},
            {1,0,0,0,0},
            {1,1,1,0,0},
            {1,0,0,0,0},
            {1,1,1,1,0}
};

int cF[5][5] = {
            {1,1,1,1,0},
            {1,0,0,0,0},
            {1,1,1,0,0},
            {1,0,0,0,0},
            {1,0,0,0,0}
};

int cG[5][5] = {
            {0,1,1,1,0},
            {0,1,0,0,0},
            {1,0,1,1,0},
            {0,1,0,1,0},
            {0,0,1,1,0}
};

int cH[5][5] = {
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,1,1,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0}
};

int cI[5][5] = {
            {1,1,1,1,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {1,1,1,1,0}
};

int cJ[5][5] = {
            {1,1,1,1,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {1,1,1,0,0}
};

int cK[5][5] = {
            {1,0,0,1,0},
            {1,0,1,0,0},
            {1,1,0,0,0},
            {1,0,1,0,0},
            {1,0,0,1,0}
};

int cL[5][5] = {
            {1,0,0,0,0},
            {1,0,0,0,0},
            {1,0,0,0,0},
            {1,0,0,0,0},
            {1,1,1,1,0}
};

int cM[5][5] = {
            {1,0,0,1,0},
            {1,1,0,1,0},
            {1,0,1,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0}
};

int cN[5][5] = {
            {1,0,0,1,0},
            {1,1,0,1,0},
            {1,0,0,1,0},
            {1,0,1,1,0},
            {1,0,0,1,0}
};

int cO[5][5] = {
            {0,1,1,0,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {0,1,1,0,0}
};

int cP[5][5] = {
            {1,1,1,0,0},
            {1,0,0,1,0},
            {1,1,1,0,0},
            {1,0,0,0,0},
            {1,0,0,0,0}
};

int cQ[5][5] = {
            {0,1,1,0,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,1,1,0},
            {0,1,1,1,0}
};

int cR[5][5] = {
            {1,1,1,0,0},
            {1,0,0,1,0},
            {1,1,1,0,0},
            {1,0,1,0,0},
            {1,0,0,1,0}
};

int cS[5][5] = {
            {0,1,1,1,0},
            {1,0,0,0,0},
            {0,1,1,0,0},
            {0,0,0,1,0},
            {1,1,1,0,0}
};

int cT[5][5] = {
            {1,1,1,1,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0}
};

int cU[5][5] = {
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {0,1,1,0,0}
};

int cV[5][5] = {
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {0,1,1,0,0},
            {0,1,0,0,0}
};

int cW[5][5] = {
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,1,1,0},
            {0,1,0,1,0}
};

int cX[5][5] = {
            {1,0,0,1,0},
            {0,1,0,1,0},
            {0,0,1,0,0},
            {0,1,0,1,0},
            {1,0,0,1,0}
};

int cY[5][5] = {
            {1,0,0,1,0},
            {0,1,0,1,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0}
};

int cZ[5][5] = {
            {1,1,1,1,0},
            {0,0,0,1,0},
            {0,0,1,0,0},
            {0,1,0,0,0},
            {1,1,1,1,0}
};

int c0[5][5] = {
            {1,1,1,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,0,0,1,0},
            {1,1,1,1,0}
};

int c1[5][5] = {
            {0,0,1,0,0},
            {0,1,1,0,0},
            {0,0,1,0,0},
            {0,0,1,0,0},
            {1,1,1,1,0}
};

int c2[5][5] = {
            {1,1,1,0,0},
            {0,0,0,1,0},
            {1,1,1,0,0},
            {1,0,0,0,0},
            {1,1,1,1,0}
};

int c3[5][5] = {
            {1,1,1,0,0},
            {0,0,0,1,0},
            {0,1,1,1,0},
            {0,0,0,1,0},
            {1,1,1,0,0}
};

int c4[5][5] = {
            {0,0,1,0,0},
            {0,1,1,0,0},
            {1,1,1,1,0},
            {0,0,1,0,0},
            {0,0,1,0,0}
};

int c5[5][5] = {
            {1,1,1,1,0},
            {1,0,0,0,0},
            {1,1,1,0,0},
            {0,0,0,1,0},
            {1,1,1,0,0}
};

int c6[5][5] = {
            {0,1,1,1,0},
            {1,0,0,0,0},
            {1,1,1,0,0},
            {1,0,0,1,0},
            {0,1,1,0,0}
};

int c7[5][5] = {
            {1,1,1,1,0},
            {0,0,0,1,0},
            {0,0,1,0,0},
            {0,1,0,0,0},
            {1,0,0,0,0}
};

int c8[5][5] = {
            {0,1,1,0,0},
            {1,0,0,1,0},
            {0,1,1,0,0},
            {1,0,0,1,0},
            {0,1,1,0,0}
};

int c9[5][5] = {
            {0,1,1,0,0},
            {1,0,0,1,0},
            {0,1,1,0,0},
            {0,1,0,0,0},
            {1,0,0,0,0}
};

int cNULL[5][5] = {
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,0,0,0},
            {0,0,0,0,0}
};

int ccol[5][5] = {
                {0,0,0,0,0},
                {0,0,1,0,0},
                {0,0,0,0,0},
                {0,0,1,0,0},
                {0,0,0,0,0}
};

int cDot[5][5] = {
                {0,0,0,0,0},
                {0,0,0,0,0},
                {0,0,0,0,0},
                {0,0,0,0,0},
                {0,1,0,0,0}
};

/****************************************************************************/
/*
 * MACROS
 */
/****************************************************************************/

/*
 * Get absolute value of x
 */
#define abs(x) ( (x)>0 ? (x) : -(x) )

/*
 * Get min between 2 given number
 */
#define min(x, y) ( (x) < (y) ? (x) : (y))

/*
 * Get max between 2 given number
 */
#define max(x, y) ( (x) < (y) ? (y) : (x))

/****************************************************************************/
/*
 * STRUCTS
 */
/****************************************************************************/

// struct for a POV message
typedef struct {
	int length;							// length of the message
	char msg[UART_BUFF_RECEIVE_MAX];	// the message
} pov_msg_t;

// struct for POV info
typedef struct {
	int user_choice;	// 0: text, 1: clock
	int hour;			// clock's hour
	int min;			// clock's minute
	int sec;			// clock's second
	pov_msg_t text;		// user's text

	char c[chFit];
	char c_save[chFit];
    int x;
    int y;
    unsigned int color[chFit];
    int clkHr;
    int clkMin;
    int clkSec;
    int text_pos_col;

} pov_info_t;

/****************************************************************************/
/*
 * GLOBAL VARIABLES
 */
/****************************************************************************/

// Instances
XGpio gpio_inst_led;            // GPIO for the LEDs
XGpio gpio_inst_btn_sw;         // GPIO for the buttons & sws
XWdtTb wdt_inst;                // the WDT instance
PmodOLEDrgb pmodOLEDrgb_inst;   // the PmodOLEDrgb instance
PmodENC pmodENC_inst;           // the PmodENC instance
XTmrCtr axi_timer_1_inst;		// the AXI Timer 1 instance
XUartLite uart_nodemcu_inst;	// the UART interface to the NodeMCU

// Task related
xSemaphoreHandle sem_input;		// semaphore notifying new inputs available
xSemaphoreHandle sem_display;	// semaphore notifying the display should be updated
xSemaphoreHandle sem_WDT;		// semaphore notifying if WDT expired

// POV
pov_info_t pov_info;			// store all POV information
unsigned int dispMat[LEDs][columns];
uint8_t sendBuff[LEDs*columns*4];
bool second = true;
int *ptr;
int setChar = 55;
int charPos = 1;
int changeOffset;
//int sw15 = 0;


// Misc.
u32 tmp_global = 0;             // temporary global variable
XWdtTb WatchdogTimebase;

/****************************************************************************/
/*
 * FUNC DECLARATIONS
 */
/****************************************************************************/

// Project 02
static XStatus init_platform();
void msleep(u32);
int ENC_getSwitch(PmodENC*);
enum _NX4IO_charcodes getSSEGCharcode(int);
static void interrupt_handler_GPIO(void*);

// Project 01
void PMDIO_itoa(int32_t value, char *string, int32_t radix);
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num);
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix);

// Project POV
int main_POV();
void thread_debug_UART(void*);
void thread_POV_main(void* p_data);
void uart_send(char* buff_start, int n_bytes_to_send);
int uart_receive(char* buff_receiving, int data_size);
void pov_msg_send(pov_msg_t* p_msg);

// Display matrix
void getchCode(char ch);
void clearMatrix();
void updtBuff();
void updtMat(int offset_col, int chNo, int offset_row);
void genMatrix();
void genClkMat();
void genClkMat();
void userData();

/****************************************************************************/
/*
 * FUNC DEFINITIONS
 */
/****************************************************************************/

/****************************************************************************/
/*
 * Main entry to this program. A master-thread will be created later in main.
 */
int main(){

	return main_POV();
//	return main_proj02();

}

/****************************************************************************/
/*
 * Set up hardware
 */
static XStatus init_platform(){

    // declarations
    XStatus xStatus;                // operation status, for checking error
    u32 led_val;                    // values to set to the LEDs
    u32 ctlsts;						// control register for the AXI Timer 1

    // ------------------------------
    // GPIO LED
    // ------------------------------

    xil_printf("Initializing GPIO: LEDs\r\n");

    // initialize & return if error
    xStatus = XGpio_Initialize( &gpio_inst_led, XPAR_AXI_GPIO_0_DEVICE_ID );
    if( xStatus != XST_SUCCESS )
    {
        xil_printf("ERROR: init GPIO LED\r\n");
        return xStatus;
    }

    // set LEDs as output port
    XGpio_SetDataDirection( &gpio_inst_led, 1, GPIO_SET_TO_OUTPUT);

    // self-check
    xil_printf("\tCheck that LEDs work\r\n");
    led_val = 1;
    for (int i=0; i<32; i++){
        XGpio_DiscreteWrite( &gpio_inst_led, 1, led_val );
        led_val = i<16 ? led_val * 2 : led_val / 2;
        usleep(20000);
    }
    XGpio_DiscreteWrite( &gpio_inst_led, 1, 0 );

    // ------------------------------
    // Nexys4 IO
    // ------------------------------

    xil_printf("Initializing NX4IO\n");

    // initialize & return if error
    xStatus = NX4IO_initialize(NX4IO_BASEADDR);
    if (xStatus != XST_SUCCESS)
    {
        xil_printf("ERROR: setup NX4IO\n");
        return XST_FAILURE;
    }

    // check & reset 7 segs
    for (int i=0; i<6; i++){
        if (i%2 == 0){
            NX410_SSEG_setAllDigits(SSEGHI, CC_8, CC_8, CC_8, CC_8, DP_ALL);
            NX410_SSEG_setAllDigits(SSEGLO, CC_8, CC_8, CC_8, CC_8, DP_ALL);
        } else {
            NX410_SSEG_setAllDigits(SSEGHI, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);
            NX410_SSEG_setAllDigits(SSEGLO, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);
        }
        msleep(150);
    }
    NX410_SSEG_setAllDigits(SSEGHI, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);
    NX410_SSEG_setAllDigits(SSEGLO, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);


    // ------------------------------
    // OledRGB
    // ------------------------------

    xil_printf("Initializing PmodOLEDrgb\n");

    // init
    OLEDrgb_begin(&pmodOLEDrgb_inst, RGBDSPLY_GPIO_BASEADDR, RGBDSPLY_SPI_BASEADDR);

    // check & reset OLEDrgb
    for (int i=0; i<6; i++){
        if (i%2 == 0) {
            OLEDrgb_DrawRectangle(&pmodOLEDrgb_inst, 0, 0, 95, 63, OLEDrgb_BuildRGB(0, 150, 150), 1, OLEDrgb_BuildRGB(0, 150, 150));
        } else {
            OLEDrgb_Clear(&pmodOLEDrgb_inst);
        }
        msleep(150);
    }
    OLEDrgb_Clear(&pmodOLEDrgb_inst);


    // ------------------------------
    // PmodENC
    // ------------------------------

    xil_printf("Initializing PmodENC\n");

    // initialize the pmodENC and hardware
    ENC_begin(&pmodENC_inst, PMODENC_BASEADDR);


	// ------------------------------
	// AXI Timer 1 (Nexys4IO)
	// ------------------------------

    xil_printf("Initializing AXI Timer 1 for Nexys4IO\n");

    // Init timer 1 instance
	xStatus = XTmrCtr_Initialize(&axi_timer_1_inst, AXI_TIMER_1_DEVICE_ID);
	if (xStatus != XST_SUCCESS) {
		xil_printf("ERROR: init instance AXI Timer 1\n");
		return XST_FAILURE;
	}
	xStatus = XTmrCtr_SelfTest(&axi_timer_1_inst, 0);
	if (xStatus != XST_SUCCESS) {
		xil_printf("ERROR: self-test AXI Timer 1\n");
		return XST_FAILURE;
	}

    // Set timer 1: auto reload, external generate, load timer using value in load-register, count-down mode
	ctlsts = XTC_CSR_AUTO_RELOAD_MASK | XTC_CSR_EXT_GENERATE_MASK | XTC_CSR_LOAD_MASK |XTC_CSR_DOWN_COUNT_MASK ;
	XTmrCtr_SetControlStatusReg(AXI_TIMER_1_BASEADDR, 0, ctlsts);

	// Set the value that is loaded into the timer counter and cause it to be loaded into the timer counter
	XTmrCtr_SetLoadReg(AXI_TIMER_1_BASEADDR, 0, AXI_TIMER_1_TICK_COUNT);
	XTmrCtr_LoadTimerCounterReg(AXI_TIMER_1_BASEADDR, 0);

	// Turn off load-bit (LOAD1) to allow the timer to run
	ctlsts = XTmrCtr_GetControlStatusReg(AXI_TIMER_1_BASEADDR, 0);
	ctlsts &= (~XTC_CSR_LOAD_MASK);
	XTmrCtr_SetControlStatusReg(AXI_TIMER_1_BASEADDR, 0, ctlsts);

	// Enable timer 1
	ctlsts = XTmrCtr_GetControlStatusReg(AXI_TIMER_1_BASEADDR, 0);
	ctlsts |= XTC_CSR_ENABLE_TMR_MASK;
	XTmrCtr_SetControlStatusReg(AXI_TIMER_1_BASEADDR, 0, ctlsts);
	XTmrCtr_Enable(AXI_TIMER_1_BASEADDR, 0);

	// Used to test if AXI Timer 1 works
    NX4IO_RGBLED_setChnlEn(RGB1, TRUE, TRUE, TRUE);
    NX4IO_RGBLED_setDutyCycle(RGB1, 0, 0, 255);

	// ------------------------------
	// UARTLite to NodeMCU
	// ------------------------------
	xil_printf("Initializing UARTLite to NodeMCU\n");

	// initialize the UartLite driver
	xStatus = XUartLite_Initialize(&uart_nodemcu_inst, UART_DEVICE_ID);
	if (xStatus != XST_SUCCESS) {
		xil_printf("ERROR: init instance UARTLite\n");
		return XST_FAILURE;
	}

	// self-test
	xStatus = XUartLite_SelfTest(&uart_nodemcu_inst);
	if (xStatus != XST_SUCCESS) {
		xil_printf("ERROR: self-test UARTLite\n");
		return XST_FAILURE;
	}

    return XST_SUCCESS;
}

/****************************************************************************/
/*
 * Get state of the ENC switch: 0(down) & 1(up) (if the SW is on the right of the knob)
 */
int ENC_getSwitch(PmodENC* p_inst){
    return (ENC_getState(p_inst) & 0x8) >> 3;
}

/****************************************************************************/
/*
 * Retrieve the corresponding SSEG char-code with the given digit [0..9]
 */
enum _NX4IO_charcodes getSSEGCharcode(int digit){
    switch (digit) {
        case 0: return CC_0;
        case 1: return CC_1;
        case 2: return CC_2;
        case 3: return CC_3;
        case 4: return CC_4;
        case 5: return CC_5;
        case 6: return CC_6;
        case 7: return CC_7;
        case 8: return CC_8;
        case 9: return CC_9;
    }

    return CC_BLANK;
}

/****************************************************************************/
/*
 * Sleep the system within the given milliseconds
 */
void msleep(u32 msec){
    usleep(msec * 1000);
}

/****************************************************************************/
/*
 * Interrupt handler for the GPIO: buttons & switches
 */
static void interrupt_handler_GPIO(void* p_data){
//    xil_printf("interrupt_handler_GPIO is called\n");

    // let input-thread know via input-semaphore
    xSemaphoreGiveFromISR(sem_input, NULL);

    // clear interrupt: 3 means clear both channels buttons & switches
    XGpio_InterruptClear( &gpio_inst_btn_sw, 3 );
}

/****************************************************************************/
/*
 * PROJECT 01 FUNCTIONS
 */
/****************************************************************************/

/****************************************************************************/
/**
* Converts an integer to ASCII characters
*
* algorithm borrowed from ReactOS system libraries
*
* Converts an integer to ASCII in the specified base.  Assumes string[] is
* long enough to hold the result plus the terminating null
*
* @param 	value is the integer to convert
* @param 	*string is a pointer to a buffer large enough to hold the converted number plus
*  			the terminating null
* @param	radix is the base to use in conversion,
*
* @return  *NONE*
*
* @note
* No size check is done on the return string size.  Make sure you leave room
* for the full string plus the terminating null in string
*****************************************************************************/
void PMDIO_itoa(int32_t value, char *string, int32_t radix)
{
	char tmp[33];
	char *tp = tmp;
	int32_t i;
	uint32_t v;
	int32_t  sign;
	char *sp;

	if (radix > 36 || radix <= 1)
	{
		return;
	}

	sign = ((10 == radix) && (value < 0));
	if (sign)
	{
		v = -value;
	}
	else
	{
		v = (uint32_t) value;
	}

  	while (v || tp == tmp)
  	{
		i = v % radix;
		v = v / radix;
		if (i < 10)
		{
			*tp++ = i+'0';
		}
		else
		{
			*tp++ = i + 'a' - 10;
		}
	}
	sp = string;

	if (sign)
		*sp++ = '-';

	while (tp > tmp)
		*sp++ = *--tp;
	*sp = 0;

  	return;
}

/****************************************************************************/
/**
* Write a 32-bit unsigned hex number to PmodOLEDrgb in Hex
*
* Writes  32-bit unsigned number to the pmodOLEDrgb display starting at the current
* cursor position.
*
* @param num is the number to display as a hex value
*
* @return  *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num)
{
  char  buf[9];
  int32_t   cnt;
  char  *ptr;
  int32_t  digit;

  ptr = buf;
  for (cnt = 7; cnt >= 0; cnt--) {
    digit = (num >> (cnt * 4)) & 0xF;

    if (digit <= 9)
	{
      *ptr++ = (char) ('0' + digit);
	}
    else
	{
      *ptr++ = (char) ('a' - 10 + digit);
	}
  }

  *ptr = (char) 0;
  OLEDrgb_PutString(InstancePtr,buf);

  return;
}

/****************************************************************************/
/**
* Write a 32-bit number in Radix "radix" to LCD display
*
* Writes a 32-bit number to the LCD display starting at the current
* cursor position. "radix" is the base to output the number in.
*
* @param num is the number to display
*
* @param radix is the radix to display number in
*
* @return *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix)
{
  char  buf[16];

  PMDIO_itoa(num, buf, radix);
  OLEDrgb_PutString(InstancePtr,buf);

  return;
}

/****************************************************************************/
/*
 * PROJECT POV FUNCTIONS
 */
/****************************************************************************/

/****************************************************************************/
/*
 * Main entry used for POV project.
 */
int main_POV(){

	XStatus xStatus;

	// init platform
	xStatus = init_platform();
	if (xStatus != XST_SUCCESS){
		xil_printf("ERROR: failed to init flatform.");
		return -1;
	}

	// create thread & start scheduler
	xil_printf("Create POV-main-thread\n");
	xTaskCreate(
			thread_POV_main,
			"POV_Main",
			4096,
			NULL,
			1,
			NULL
			);
	vTaskStartScheduler();

	return 0;
}

/****************************************************************************/
/*
 * [THREAD] Thread used for debugging UART
 */
void thread_debug_UART(void* p_data){
	// declarations
	int Status;
	int n_bytes_received;						// number of bytes received
	int n_data_bytes;							// number of bytes in the upcoming message
	char buff_receive[UART_BUFF_RECEIVE_MAX];
	char* buff_send;

	/*
	 * Initialize the UartLite driver so that it is ready to use.
	 */
	Status = XUartLite_Initialize(&uart_nodemcu_inst, UART_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		vTaskDelete(NULL);
		return;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	Status = XUartLite_SelfTest(&uart_nodemcu_inst);
	if (Status != XST_SUCCESS) {
		vTaskDelete(NULL);
		return;
	}

	while (1){

		// send until done
		buff_send = "beginend\n";
		uart_send(buff_send, strlen(buff_send));

		// receive & construct data size
		n_bytes_received = uart_receive(buff_receive, 2);
		n_data_bytes = 0 | (buff_receive[0] << 8);
		n_data_bytes = n_data_bytes | buff_receive[1];
		xil_printf("Data_size=%d\n", n_data_bytes);

		// do nothing if data is too big for the buffer
		if (n_data_bytes > UART_BUFF_RECEIVE_MAX){
			xil_printf("Data is too big (%d). Stop receiving.\n", n_data_bytes);
			continue;
		}

		// receive data
		n_bytes_received = uart_receive(buff_receive, n_data_bytes);

		// end string & print
		buff_receive[n_bytes_received] = 0;
		xil_printf("Data=[%s]\n", buff_receive);

		// delay 1 sec
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}

	// safely delete task
	vTaskDelete(NULL);
}

/****************************************************************************/
/*
 * [THREAD] Main thread for POV project
 */
void thread_POV_main(void* p_data){
	// declarations
	uint16_t switches;

	// setup
	pov_info.clkSec = 45;
	pov_info.text.length = 1360;
	pov_info.text_pos_col = 0;
	for (int ic=0; ic<6; ic++){
		pov_info.c_save[ic] = 32;
		pov_info.c[ic] = 32;
	}

    // read switches & prepare initial message to send
    switches = NX4IO_getSwitches();
	userData();
	genMatrix();
    updtBuff();
	for (size_t i = 0; i < 1360; i++)
	{
		pov_info.text.msg[i] = sendBuff[i];
	}

    // forever loop
	while (1){

		// send the text
		pov_msg_send(&pov_info.text);

        // read switches & prepare next message to send
	    switches = NX4IO_getSwitches();
	    if((switches >> 15) & 0x1){

	    	userData();
			genMatrix();
	    }
	    else{

	    	pov_info.c[0] = '0' + (pov_info.clkHr / 10);
	    	pov_info.c[1] = '0' + (pov_info.clkHr % 10);
	    	pov_info.c[2] = '0' + (pov_info.clkMin / 10);
	    	pov_info.c[3] = '0' + (pov_info.clkMin % 10);
	    	pov_info.color[0] = 0xff00ff;
	    	pov_info.color[1] = 0xff00ff;
	    	pov_info.color[2] = 0xffff00;
	    	pov_info.color[3] = 0xffff00;
	    	genClkMat();
	    }
	    updtBuff();
		for (size_t i = 0; i < 1360; i++)
		{
			pov_info.text.msg[i] = sendBuff[i];
		}

		//Updating clock
		pov_info.clkSec++;
		if(pov_info.clkSec >= 60){
			pov_info.clkSec = 0;
			pov_info.clkMin++;
		}
		if(pov_info.clkMin >= 60)
		{
			pov_info.clkMin = 0;
			pov_info.clkHr++;
		}
		if(pov_info.clkHr >= 24){
			pov_info.clkHr = 0;
		}

        // for blinking the colon
	    second = !second;

		// delay 1 sec
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}

	// safely delete task
	vTaskDelete(NULL);
}

/****************************************************************************/
/*
 * (blocking) Send the given buffer until done
 */
void uart_send(char* buff_start, int n_bytes_to_send){
	// declarations
	int count_send;
	int remaining_size;
	char* buff_start_pos;

	// send until done
	buff_start_pos = buff_start;
	remaining_size = n_bytes_to_send;
	while (remaining_size > 0) {
		count_send = XUartLite_Send(&uart_nodemcu_inst, (u8*)buff_start_pos, remaining_size);
		remaining_size -= count_send;
		buff_start_pos += count_send;
	}

}

/****************************************************************************/
/*
 * (blocking) Receive the next packet until done.
 * Return -1 if failed, >=0 if success & is the number of received bytes
 */
int uart_receive(char* buff_receiving, int data_size){

	// declarations
	int remaining_receive;	// remaining bytes to receive
	int count_receive;		// number of received bytes in the last receive command
	u8* buff_start_pos;		// start position for writing to the buffer

	// received until done
	buff_start_pos = (u8*)buff_receiving;
	remaining_receive = data_size;
	while (remaining_receive > 0) {
		count_receive = XUartLite_Recv(&uart_nodemcu_inst, buff_start_pos, remaining_receive);
		remaining_receive -= count_receive;
		buff_start_pos += count_receive;
	}

	return data_size;
}

/****************************************************************************/
/*
 * (blocking) Send the given POV message
 */
void pov_msg_send(pov_msg_t* p_msg){

	// declarations
	char buff_length[2];	// buffer for sending the length

	// send length first
	buff_length[0] = (p_msg->length >> 8) & 0x00FF;
	buff_length[1] = (p_msg->length     ) & 0x00FF;
	uart_send(buff_length, 2);

	// delay
	vTaskDelay(10 / portTICK_PERIOD_MS);

	// send data
	uart_send(p_msg->msg, p_msg->length);
}

/****************************************************************************/
/*
 * Retrieve the matrix layout to the given character
 */
void getchCode(char ch){
    switch (ch)
    {
    case 'A':
        ptr = &cA[0][0];
        break;

    case 'B':
        ptr = &cB[0][0];
        break;

    case 'C':
        ptr = &cC[0][0];
        break;

    case 'D':
        ptr = &cD[0][0];
        break;

    case 'E':
        ptr = &cE[0][0];
        break;

    case 'F':
        ptr = &cF[0][0];
        break;

    case 'G':
        ptr = &cG[0][0];
        break;

    case 'H':
        ptr = &cH[0][0];
        break;

    case 'I':
        ptr = &cI[0][0];
        break;

    case 'J':
        ptr = &cJ[0][0];
        break;

    case 'K':
        ptr = &cK[0][0];
        break;

    case 'L':
        ptr = &cL[0][0];
        break;

    case 'M':
        ptr = &cM[0][0];
        break;

    case 'N':
        ptr = &cN[0][0];
        break;

    case 'O':
        ptr = &cO[0][0];
        break;

    case 'P':
        ptr = &cP[0][0];
        break;

    case 'Q':
        ptr = &cQ[0][0];
        break;

    case 'R':
        ptr = &cR[0][0];
        break;

    case 'S':
        ptr = &cS[0][0];
        break;

    case 'T':
        ptr = &cT[0][0];
        break;

    case 'U':
        ptr = &cU[0][0];
        break;

    case 'V':
        ptr = &cV[0][0];
        break;

    case 'W':
        ptr = &cW[0][0];
        break;

    case 'X':
        ptr = &cX[0][0];
        break;

    case 'Y':
        ptr = &cY[0][0];
        break;

    case 'Z':
        ptr = &cZ[0][0];
        break;

    case '0':
        ptr = &c0[0][0];
        break;

    case '1':
        ptr = &c1[0][0];
        break;

    case '2':
        ptr = &c2[0][0];
        break;

    case '3':
        ptr = &c3[0][0];
        break;

    case '4':
        ptr = &c4[0][0];
        break;

    case '5':
        ptr = &c5[0][0];
        break;

    case '6':
        ptr = &c6[0][0];
        break;

    case '7':
        ptr = &c7[0][0];
        break;

    case '8':
        ptr = &c8[0][0];
        break;

    case '9':
        ptr = &c9[0][0];
        break;

    case ':':
        ptr = &ccol[0][0];
        break;

    case ' ':
        ptr = &cNULL[0][0];
        break;

    case '/':
        ptr = &cDot[0][0];
        break;

    default:
        ptr = &cNULL[0][0];
        break;
    }
}

/****************************************************************************/
/*
 * Clear the display matrix
 */
void clrMatrix(){
    int i,j;
    for ( i = 0; i < LEDs; i++)
    {
        for (j = 0; j < columns; j++)
        {
            dispMat[i][j] = 0x00;
        }

    }

}

/****************************************************************************/
/*
 * Copy display matrix to the buffer
 */
void updtBuff(){
    int i,j;
    for (i = 0; i < LEDs; i++)
    {
        for ( j = 0; j < columns; j++)
        {
            sendBuff[(i*34 + j)*4] = (dispMat[i][j] >> 24) & 0xff;
            sendBuff[(i*34 + j)*4 + 1] = (dispMat[i][j] >> 16) & 0xff;
            sendBuff[(i*34 + j)*4 + 2] = (dispMat[i][j] >> 8) & 0xff;
            sendBuff[(i*34 + j)*4 + 3] = dispMat[i][j] & 0xff;
        }

    }

}

/****************************************************************************/
/*
 * Update display matrix with the given character (chNo)
 */
void updtMat(int offset_col, int chNo, int offset_row){
    int col;

    //wrap the offset around
    offset_col = offset_col % 29;
    offset_row = offset_row % 6;

    for (size_t i = 0; i < 5; i++)
    {
        for (size_t j = 0; j < 5; j++)
        {
            col = pov_info.y + offset_col + j;
            if (col > (columns - 1))
            {
                col = col - columns;
            }
            else if (col < 0)
            {
                col = columns + col;
            }

            if (*((ptr + i*5) + j) == 1)
            {
                dispMat[i + pov_info.x + offset_row][col] = pov_info.color[chNo];
            }
            else
            {
                dispMat[i + pov_info.x + offset_row][col] = 0x0000;
            }

            if(i == 4)
            {
            	if(changeOffset == chNo){
            		dispMat[i + pov_info.x + 2 + offset_row][col] = pov_info.color[chNo];
            	}
            }

        }

    }

}

/****************************************************************************/
/*
 * Paint the user's text onto the display matrix
 */
void genMatrix(){
    clrMatrix();

    // load characters
	for (int ic=0; ic<6; ic++){
		pov_info.c[ic] = pov_info.c_save[ic];
	}

    getchCode(pov_info.c[0]);
    updtMat(pov_info.text_pos_col + 0, 0, 0);

    getchCode(pov_info.c[1]);
    updtMat(pov_info.text_pos_col +  5, 1, 0);

    getchCode(pov_info.c[2]);
    updtMat(pov_info.text_pos_col +  10, 2, 0);

    getchCode(pov_info.c[3]);
    updtMat(pov_info.text_pos_col +  15, 3, 0);

    getchCode(pov_info.c[4]);
    updtMat(pov_info.text_pos_col +  20, 4, 0);

    getchCode(pov_info.c[5]);
    updtMat(pov_info.text_pos_col + 25, 5, 0);

}

/****************************************************************************/
/*
 * Paint the clock onto the display matrix
 */
void genClkMat(){
    clrMatrix();

    getchCode(pov_info.c[0]);
    updtMat(0, 0, 0);

    getchCode(pov_info.c[1]);
    updtMat( 5, 1, 0);

    if (second)
    {
        getchCode(':');
        updtMat(10,2, 0);
    }
    else
    {
        getchCode(' ');
        updtMat(10,5, 0);
    }

    getchCode(pov_info.c[2]);
    updtMat(0, 2, 5);

    getchCode(pov_info.c[3]);
    updtMat(5, 3, 5);
    changeOffset = 10;

}

/****************************************************************************/
/*
 * Read text inputed by the user
 */
void userData(){
	uint16_t switches;

	// restore last value of the selected character
	setChar = pov_info.c_save[charPos];

    // read states of switches & buttons
    switches = NX4IO_getSwitches();
    pbtns = NX4IO_getBtns();

    // process buttons
    if (NX4IO_isPressed(BTNU))
    {
        setChar = setChar + 1;
    }
    if (NX4IO_isPressed(BTND))
    {
        setChar = setChar - 1;
    }
    if (NX4IO_isPressed(BTNR))
    {
        charPos = charPos + 1;
    }
    if (NX4IO_isPressed(BTNL))
    {
        charPos = charPos - 1;
    }
    if (NX4IO_isPressed(BTNC))
    {
        setChar = 32;
    }

    // process switches
    if ((switches & 0x01 )== 1)
    {
        if (setChar > 90)
            setChar = 65;
        else if ((setChar < 65) && (setChar != 32))
            setChar = 90;
    }
    else
    {
        if (setChar > 57)
            setChar = 47;
        else if ((setChar < 47) && (setChar != 32))
            setChar = 57;
    }

    // wrap around the character position
    if (charPos > 5)
        charPos = 0;
    else if (charPos < 0)
        charPos = 5;

    // record new value for the selected character
    pov_info.c_save[charPos] = (int)setChar;

    // set color
    if (switches & 0x8)
        pov_info.color[charPos] = pov_info.color[charPos] | 0xff0000;
    else
        pov_info.color[charPos] = pov_info.color[charPos] & 0x00ffff;

    if (switches & 0x4)
        pov_info.color[charPos] = pov_info.color[charPos] | 0xff00;
    else
        pov_info.color[charPos] = pov_info.color[charPos] & 0xff00ff;

    if (switches & 0x2)
        pov_info.color[charPos] = pov_info.color[charPos] | 0xff;
    else
        pov_info.color[charPos] = pov_info.color[charPos] & 0xffff00;
    changeOffset = charPos;

}

